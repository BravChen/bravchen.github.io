<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on MrChen</title>
    <link>https://bravchen.github.io/categories/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on MrChen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Jun 2020 19:05:43 +0800</lastBuildDate>
    
	<atom:link href="https://bravchen.github.io/categories/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>函数与对象的语法糖一</title>
      <link>https://bravchen.github.io/history/2019-12-01-function-object-sugar/</link>
      <pubDate>Sun, 01 Dec 2019 18:32:01 +0000</pubDate>
      
      <guid>https://bravchen.github.io/history/2019-12-01-function-object-sugar/</guid>
      <description>或语法(||) #  传参案例 #  function sum(a, b){ console.log(b) return a+b } console.log(&amp;#39;返回值：&amp;#39;+sum(1)) 此时 b 的值是 undefined ，所以结果是 NaN 无法相加，打出的 b 为 undefined
为了避免这种情况，可以使用以下写法：
ES6写法 #  如果 a 或 b === undefined，则等于 0 。相当于未传值时的默认值为 0
function sum(a=0, b=0){ return a+b }  其中 a=0 相当于 if(a===undefined){ a=0 }，b 同理
 ES6之前的写法 #  如果 b 为真，则 b = b 否则 b = 0 ，a 同理
function sum(a, b){ a = a || 0 b = b || 0 return a+b }  其中 b = b || 0 相当于 if(b){ b = b }else{ b = 0 }</description>
    </item>
    
    <item>
      <title>JavaScript达到什么水平，可以写类似Vue的框架？</title>
      <link>https://bravchen.github.io/posts/2020-06-04-wlfjscywv/</link>
      <pubDate>Thu, 04 Jun 2020 19:05:43 +0800</pubDate>
      
      <guid>https://bravchen.github.io/posts/2020-06-04-wlfjscywv/</guid>
      <description>今天在看方方老师的课程时，看到一个很赞的回答，顺便记录下来鼓励一下自己。
提问：JavaScript达到什么水平，可以写类似Vue的框架？ #  答：
在编程界没有什么水平的定义，而是你先定一个目标，去实现它。要么实现了，要么实现不了。
学习方式不是达到什么水平才去写什么，而是你写了什么才能达到什么水平。
你要先去做，才能达到那个水平，而不是达到那个水平再去做，因为你没有做过是永远达不到那个水平的。
先做在达到，做的时候去搜各种知识，不停的去迭代它，完善它。</description>
    </item>
    
    <item>
      <title>CSS选择器总结</title>
      <link>https://bravchen.github.io/history/2020-06-04-css-selector/</link>
      <pubDate>Thu, 04 Jun 2020 09:00:30 +0800</pubDate>
      
      <guid>https://bravchen.github.io/history/2020-06-04-css-selector/</guid>
      <description>文章 #    思否：https://segmentfault.com/a/1190000009887677
  知乎：https://zhuanlan.zhihu.com/p/89314067
  </description>
    </item>
    
    <item>
      <title>JS 拖曳事件总结</title>
      <link>https://bravchen.github.io/posts/2020-06-01-js-mouse-event/</link>
      <pubDate>Mon, 01 Jun 2020 19:17:59 +0800</pubDate>
      
      <guid>https://bravchen.github.io/posts/2020-06-01-js-mouse-event/</guid>
      <description>常用的三个事件 #  mousedown #  当指针(鼠标)在元素上按下时触发
mousemove #  当指针(鼠标)在元素上移动时触发
mouseup #  当指针(鼠标)在元素上抬起时触发
使用案例 #  demo.onmousedown = function(){ console.log(&amp;#39;鼠标已按下&amp;#39;) } demo.addEventListener(&amp;#39;mousedown&amp;#39;, function(e){ console.log(&amp;#39;鼠标已按下&amp;#39;) }) </description>
    </item>
    
    <item>
      <title>AJAX 的封装</title>
      <link>https://bravchen.github.io/posts/2020-05-29-ajax-use/</link>
      <pubDate>Fri, 29 May 2020 21:19:30 +0800</pubDate>
      
      <guid>https://bravchen.github.io/posts/2020-05-29-ajax-use/</guid>
      <description>原生 JS 实现 AJAX #  let request = new XMLHttpRequest() request.open(&amp;#39;get&amp;#39;, &amp;#39;http://jack.com:8002/xxx&amp;#39;) request.send() request.onreadystatechange = ()=&amp;gt;{ if(request.readyState === 4){ if(request.status &amp;gt;= 200 &amp;amp;&amp;amp; request.status &amp;lt; 300){ let string = request.responseText let object = window.JSON.parse(string) console.log(&amp;#39;请求成功!&amp;#39;) }else if(request.status &amp;gt;= 400){ console.log(&amp;#39;请求失败!&amp;#39;) } } } 封装一个 jQuery.ajax #  window.jQuery.ajax = function(url, method, body, successFn, failFn){ let request = new XMLHttpRequest() request.open(method, url) request.onreadystatechange = ()=&amp;gt;{ if(request.readyState === 4){ if(request.status &amp;gt;= 200 &amp;amp;&amp;amp; request.</description>
    </item>
    
    <item>
      <title>Document API</title>
      <link>https://bravchen.github.io/posts/a0000001/</link>
      <pubDate>Sat, 16 May 2020 22:22:05 +0000</pubDate>
      
      <guid>https://bravchen.github.io/posts/a0000001/</guid>
      <description>Class 类名添加与删除 #  当点击 id 为 xxx 的元素时，如果 id 为 yyy 元素存在 active 的 class 样式就删除该 class 名，不存在就添加该 class 名
xxx.onclick = function(){ yyy.classList.toggle(&amp;#39;active&amp;#39;) } 案例链接：https://jsbin.com/xoxelaj/1/edit?html,css,js,output
String #  获取某一个索引对应的字符 (String.prototype.charAt()) #  var str = &amp;#39;wobuzaiyi&amp;#39; // 获取某一个索引对应的字符 str.charAt(0) // &amp;#34;w&amp;#34; // 获取某一个索引对应的字符的编码 -- String.prototype.charCodeAt() str.charCodeAt(0) // 119 -- &amp;#34;w&amp;#34;对应的字符编码 去掉字符串两边的空格 (String.prototype.trim()) #  &amp;#39; username &amp;#39;.trim() // &amp;#34;username&amp;#34; 字符串拼接 (Array.prototype.concat()) #  var s1 = &amp;#39;Hello&amp;#39; var s2 = &amp;#39;World&amp;#39; s1.</description>
    </item>
    
    <item>
      <title>新版变量声明：let 和 const</title>
      <link>https://bravchen.github.io/posts/a0000002/</link>
      <pubDate>Thu, 30 Apr 2020 17:55:32 +0000</pubDate>
      
      <guid>https://bravchen.github.io/posts/a0000002/</guid>
      <description>ES 6 新特性一览：https://frankfang.github.io/es-6-tutorials/
教程：es6.ruanyifeng.com
先学 ES 5 还是 ES 6 #  无聊的问题，ES 6 包含 ES 5，你无论如何都必须先学 ES 5，才能看懂 ES 6
ES 6 如何学 #   快速通览，然后使用 边使用边加深印象  自学的问题 #  你不知道一个语法为什么要存在
 触类旁通，去看看其他语言有没有这个语法，怎么用的 反证法，如果不用这个语法，该怎么实现需求  let &amp;amp; const #  我用了两个月的时间才理解 let
 let 和 var 的区别 const 和 let 的区别 相关面试题  </description>
    </item>
    
    <item>
      <title>2020年前端面试提纲</title>
      <link>https://bravchen.github.io/docs/2020-04-22-2020-interview-outline/</link>
      <pubDate>Wed, 22 Apr 2020 11:21:35 +0000</pubDate>
      
      <guid>https://bravchen.github.io/docs/2020-04-22-2020-interview-outline/</guid>
      <description>押题内容来自：https://xiedaimala.com/tasks/e67878e4-ef45-4545-9cad-a1946c6e21f1
说明：
  代码：答案直接展示相关代码
  举例：举一个实际使用的案例
  阐述：阐述问题的概念
  HTML #    必考：你是如何理解 HTML 语义化的？
举例
  meta viewport 是做什么用的，怎么写？
举例
  你用过哪些 HTML 5 标签？
举例
  H5 是什么？
阐述
  CSS #    必考：两种盒模型分别说一下。
举例
  必考：如何垂直居中？
分情况讨论
  必考：flex 怎么用，常用属性有哪些？
举例
  必考：BFC 是什么？
举例
  CSS 选择器优先级
举例
  清除浮动说一下</description>
    </item>
    
    <item>
      <title>面向对象</title>
      <link>https://bravchen.github.io/history/2019-10-03-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Thu, 03 Oct 2019 21:02:57 +0000</pubDate>
      
      <guid>https://bravchen.github.io/history/2019-10-03-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>面向对象以及命名空间
面向对象 #  OO 编程 全称 Object Oriented 编程 &amp;mdash; 也就是面向对象编程
命名空间 #  // 全局命名空间 var MYAPP = MYAPP || {}; 式子的原理
或 a || b 与 且 a &amp;amp;&amp;amp; b ，的值基本上不可能是 true 或 false 本身，他们的值只能从一个为 true 或者为 false 的值中选一个
复习知识
五个 false 值：0, NaN, &#39;&#39;, null, undefined
且 a &amp;amp;&amp;amp; b
案例`：
1 &amp;amp;&amp;amp; 0 // 返回值是 0 1 &amp;amp;&amp;amp; 0 &amp;amp;&amp;amp; 2 // 返回值是 0 1 &amp;amp;&amp;amp; 0 &amp;amp;&amp;amp; 2 &amp;amp;&amp;amp; 3 &amp;amp;&amp;amp; 4 // 返回值是 0 结论：在 &amp;amp;&amp;amp; 中，只要第一 false 值出现，那就返回这个 false 对应的值。不会再查看后面对应的值为真或为假，因为只要出现一个false值就说明整个式子都是假</description>
    </item>
    
    <item>
      <title>自制jQuery</title>
      <link>https://bravchen.github.io/history/2019-10-03-%E8%87%AA%E5%88%B6jquery/</link>
      <pubDate>Thu, 03 Oct 2019 06:56:28 +0000</pubDate>
      
      <guid>https://bravchen.github.io/history/2019-10-03-%E8%87%AA%E5%88%B6jquery/</guid>
      <description>原生 JS 实现 jQuery
jQuery 官网的三个下载文件
 压缩的 未压缩的 搜索 阮一峰 source map  用到的API #  arr.forEach #  forEach() 方法对数组的每个元素执行一次提供的函数。
语法
arr.forEach(callback[, thisArg]); MDN 文档 arr.forEach
arr.push #  push() 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。
语法
arr.push(element1, ..., elementN) MDN 文档 arr.push
instanceof #  instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。
语法
object instanceof constructor MDN 文档 instanceof
封装两个函数 #  首先在 html 中添加一个无序列表
&amp;lt;body&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li id=&amp;#34;item1&amp;#34;&amp;gt;选项1&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;item2&amp;#34;&amp;gt;选项2&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;item3&amp;#34;&amp;gt;选项3&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;item4&amp;#34;&amp;gt;选项4&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;item5&amp;#34;&amp;gt;选项5&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/body&amp;gt; 排他方式获取子元素 #  获取除了当前元素以外的所有兄弟姐妹元素</description>
    </item>
    
    <item>
      <title>MVVM</title>
      <link>https://bravchen.github.io/history/2019-10-01-mvvm/</link>
      <pubDate>Tue, 01 Oct 2019 22:36:23 +0000</pubDate>
      
      <guid>https://bravchen.github.io/history/2019-10-01-mvvm/</guid>
      <description>复习 MVC 以及使用 MVVM
axios #  cdn
bootcdn: https://www.bootcdn.cn/
引入axios #  &amp;lt;script src=&amp;#34;https://cdn.bootcss.com/axios/0.19.0/axios.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  在 bootcdn 中搜索 axios
 使用axios #  基本用法可以查看文档
axios 项目地址 https://github.com/axios/axios
发送请求案例
axios.get(&amp;#39;/books/1&amp;#39;).then(function ({data}) { let originalHtml = $(&amp;#39;#app&amp;#39;).html() let newHtml = originalHtml.replace(&amp;#39;__name__&amp;#39;,data.name) .replace(&amp;#39;__number__&amp;#39;,data.number) $(&amp;#39;#app&amp;#39;).html(newHtml) }) axios.put(&amp;#39;/books/1&amp;#39;).then(function(){ $(&amp;#39;#number&amp;#39;).text(result) }) ES6 新语法 #  声明 #  之前
let response = { config:{ method:&amp;#39;methodxxx&amp;#39;, url:&amp;#39;urlxxx&amp;#39;, data:&amp;#39;dataxxx&amp;#39; } } let config = response.config let method = config.</description>
    </item>
    
    <item>
      <title>this是什么</title>
      <link>https://bravchen.github.io/history/2019-09-28-this%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Sat, 28 Sep 2019 00:01:46 +0000</pubDate>
      
      <guid>https://bravchen.github.io/history/2019-09-28-this%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>this 只是一个参数，并不是什么特殊的东西
附方方老师的原文链接
知乎：https://zhuanlan.zhihu.com/p/23804247
this 是什么 #  this 就是 call() 的第一个参数，如果想要知道 this 是什么，就要去查看源代码的文档，如 MDN、jQuery 等
例如：
onclick 的 this
  在MDN搜索 onclick 或者 直接搜索 MDN onclick
  MDN链接：https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onclick#%E8%AF%AD%E6%B3%95
  addEventListener 的 this
  在 MDN 搜索 addEventListener 或者 直接搜索 MDN addEventListener
  MDN链接：https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#The_value_of_this_within_the_handler
  jQuery 中 .on(&#39;click&#39;) 的 this
  搜索 jQuery 文档中的 .on()
  jQuery 链接：https://www.jquery123.com/on/
  练习题 #     function X(){ return object = { name: &amp;#39;object&amp;#39;, f1(x){ x.</description>
    </item>
    
    <item>
      <title>New做了什么</title>
      <link>https://bravchen.github.io/history/2019-09-27-new%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</link>
      <pubDate>Fri, 27 Sep 2019 23:15:26 +0000</pubDate>
      
      <guid>https://bravchen.github.io/history/2019-09-27-new%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</guid>
      <description>New 一个函数或对象时会添加哪些默认属性
new 做了什么 #  案例代码
function 士兵(id){ /* let temp = {} */ /* this = temp */ /* this.__proto__ = 士兵.prototype */ this.ID = id, this.生命值 = 42 /* 自有属性 */ /* return this */ } 士兵.prototype = { /* 共有属性 */ 兵种:&amp;#34;美国大兵&amp;#34;, 攻击力: a, 行走:function(){/* 行走的代码 */} 奔跑:function(){/* 奔跑的代码 */} 死亡:function(){/* 死亡的代码 */} } 总结 new 一个函数时做了什么
 创建一个临时对象 让 this 指向这个临时对象 让 this.__proto__ = create士兵.prototype 返回 return this   这些行为，俗称语法糖 ( 语法糖，就是很贴心的意思 )</description>
    </item>
    
    <item>
      <title>代码模块化</title>
      <link>https://bravchen.github.io/history/2019-09-21-%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%9D%97%E5%8C%96/</link>
      <pubDate>Sat, 21 Sep 2019 10:21:19 +0000</pubDate>
      
      <guid>https://bravchen.github.io/history/2019-09-21-%E4%BB%A3%E7%A0%81%E6%A8%A1%E5%9D%97%E5%8C%96/</guid>
      <description>代码模块化以及闭包的使用
模块化 #  每个功能都单独存放在一个文件中并给文件起一个合适的名字，
然后每个文件的所有代码都用一个自调用的匿名函数包起来 function(){}.call() 但是这个方法浏览器会报错
经过前人不断尝试，可以给函数前加一个 ! 表示取反，虽然会改变这个函数的 return 结果，但我们不需要结果，只需要执行这个函数就可以，所以这是最佳的方案
!function(){ let xxx = &amp;#39;xxxx&amp;#39; let aaa = &amp;#39;xwww&amp;#39; }.call() 闭包 #  在不同文件下调用 #  html
&amp;lt;body&amp;gt; &amp;lt;script src=&amp;#34;m1.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;m2.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; m1.js
!function(){ let person = { name: &amp;#39;chen&amp;#39;, age: 20 } window.fn = function(){ person.age +=1 return person.age } }.call() m2.js
!function(){ let a = window.fn() console.log(a) }.call() 在同一个文件下调用 #  var accessor = function(){ var person = { name: &amp;#39;chen&amp;#39;, age: 20 } return function(){ person.</description>
    </item>
    
    <item>
      <title>MVC思想</title>
      <link>https://bravchen.github.io/history/2019-09-20-mvc%E6%80%9D%E6%83%B3/</link>
      <pubDate>Fri, 20 Sep 2019 17:56:46 +0000</pubDate>
      
      <guid>https://bravchen.github.io/history/2019-09-20-mvc%E6%80%9D%E6%83%B3/</guid>
      <description>MVC 封装一个简单的个人简历
预览链接：https://chenning02.github.io/git-hunger/course-demo/bio/bio-d-MVC/index.html
MVC 封装之 VC #  第一步
创建两个变量，分别来存储 View 和 Controller
!function(){ // 导航栏根据滚轮改变  let view = document.getElementById(&amp;#39;topNavBar&amp;#39;) let controller = { view: null, init: function(view){ window.addEventListener(&amp;#39;scroll&amp;#39;, function(x){ if(window.scrollY &amp;gt; 0){ view.classList.add(&amp;#39;sticky&amp;#39;) }else { view.classList.remove(&amp;#39;sticky&amp;#39;) } }) } } controller.init(view) }.call() 第二步
添加一个 bindEvents 方法 用来绑定执行所用事件
!function(){ // 导航栏根据滚轮改变  let view = document.getElementById(&amp;#39;topNavBar&amp;#39;) let controller = { view: null, init: function(view){ // 这里是将 传入的外部 view 的值赋给 controller 对象的 view  this.</description>
    </item>
    
    <item>
      <title>自己实现 AJAX</title>
      <link>https://bravchen.github.io/history/2019-09-18-%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0-ajax/</link>
      <pubDate>Wed, 18 Sep 2019 21:40:15 +0000</pubDate>
      
      <guid>https://bravchen.github.io/history/2019-09-18-%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0-ajax/</guid>
      <description>设置请求 #  案例
request.open(&amp;#39;POST&amp;#39;, &amp;#39;/xxx&amp;#39;) // 第一部分 配置 request request.setRequestHeader(&amp;#39;chen&amp;#39;,&amp;#39;16&amp;#39;) // 第二部分 属性配置 request.setRequestHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;x-www-form-urlencoded&amp;#39;) // 第二部分 属性配置 request.send(&amp;#39;a=1&amp;amp;b=2&amp;#39;) // 第四部分 请求第二部分
XMLHttpRequest.setRequestHeader() 是设置HTTP请求头部的方法。此方法必须在 open() 方法和 send() 之间调用。如果多次对同一个请求头赋值，只会生成一个合并了多个值的请求头。
request.setRequestHeader(header, value); 效果图
设置响应 #  if(path === &amp;#39;/&amp;#39;){ let string = fs.readFileSync(&amp;#39;./index.html&amp;#39;,&amp;#39;utf8&amp;#39;) // 响应第四部分内容格式  response.statusCode = 200 // 设置响应第一部分响应码  response.setHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;text/html;charset=utf-8&amp;#39;) // 设置响应第二部分属性  response.write(string) // 设置响应第四部分  response.end() // 响应结束 } 获取响应 #  获取响应的状态
response.statusText; 获取响应的第二部分</description>
    </item>
    
    <item>
      <title>JSONP</title>
      <link>https://bravchen.github.io/history/2019-09-16-jsonp/</link>
      <pubDate>Mon, 16 Sep 2019 14:35:47 +0000</pubDate>
      
      <guid>https://bravchen.github.io/history/2019-09-16-jsonp/</guid>
      <description>所有案例源代码链接 https://github.com/ChenNing02/git-hunger/tree/master/course-demo/JSONP
请求方式 #  使用 iframe 提交 #  代码：
index.html
&amp;lt;p&amp;gt;你的账户余额为&amp;lt;span id=&amp;#34;amount&amp;#34;&amp;gt;&amp;amp;&amp;amp;&amp;amp;amount&amp;amp;&amp;amp;&amp;amp;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;form action=&amp;#34;/pay&amp;#34; method=&amp;#34;POST&amp;#34; target=&amp;#34;result&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;付款&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;iframe name=&amp;#34;result&amp;#34; src=&amp;#34;about:blank&amp;#34; frameborder=&amp;#34;0&amp;#34; height=&amp;#34;50&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt; server.js
if (path === &amp;#39;/pay&amp;#39; &amp;amp;&amp;amp; method.toUpperCase() === &amp;#39;POST&amp;#39;) { let amount = fs.readFileSync(&amp;#39;./db&amp;#39;, &amp;#39;utf8&amp;#39;) let newAmount = amount - 1 // 随机成功或失败，这样可以查看成功或失败的效果  if (Math.random() &amp;gt; 0.5) { // 修改存储数据的文件  fs.writeFileSync(&amp;#39;./db&amp;#39;, newAmount) response.write(&amp;#39;success&amp;#39;) } else { response.write(&amp;#39;fail&amp;#39;) } response.end() }  使用iframe代替打开新窗口，这样就可以不打开新窗口来显示成功或失败</description>
    </item>
    
    <item>
      <title>vim 入门</title>
      <link>https://bravchen.github.io/history/2019-09-14-vim-get-started/</link>
      <pubDate>Sat, 14 Sep 2019 20:39:55 +0000</pubDate>
      
      <guid>https://bravchen.github.io/history/2019-09-14-vim-get-started/</guid>
      <description>退出vim #    不保存强制退出：:q!
  强制退出：:qa!
  区别：使用 :q! 会退出并且抛出一个错误，而使用 :qa! 会直接退出不抛出错误
查看官方文档 vimtutor
使用到的单词
quit 退出 write/read 写入/读取 copy(yank) 拷贝(把...拽到) paste 粘贴 delete 删除 change 改变 line 行 find 查找文字 word 查找单词 forward/backward 向前/向后 up/down 向上/向下 insert/append 插入/ insert 模式(编辑模式) 普通模式(normal模式) do/undo/redo 做/撤销/还原 默认模式 (普通模式)
按 x 删除光标所在字母
按 u 撤销
按 ctrl + r 重做
按 i 在光标前插入
按 a 在光标后插入
按 Shift + i 移至当前行尾</description>
    </item>
    
    <item>
      <title>vim 的使用</title>
      <link>https://bravchen.github.io/history/2019-09-14-vim%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 14 Sep 2019 20:39:55 +0000</pubDate>
      
      <guid>https://bravchen.github.io/history/2019-09-14-vim%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>退出vim #    不保存强制退出：:q!
  强制退出：:qa!
  区别：使用 :q! 会退出并且抛出一个错误，而使用 :qa! 会直接退出不抛出错误
查看官方文档 vimtutor
使用到的单词
quit 退出 write/read 写入/读取 copy(yank) 拷贝(把...拽到) paste 粘贴 delete 删除 change 改变 line 行 find 查找文字 word 查找单词 forward/backward 向前/向后 up/down 向上/向下 insert/append 插入/ insert 模式(编辑模式) 普通模式(normal模式) do/undo/redo 做/撤销/还原 默认模式 (普通模式)
按 x 删除光标所在字母
按 u 撤销
按 ctrl + r 重做
按 i 在光标前插入
按 a 在光标后插入
按 Shift + i 移至当前行尾</description>
    </item>
    
    <item>
      <title>浏览器缓存</title>
      <link>https://bravchen.github.io/history/2019-09-09-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</link>
      <pubDate>Mon, 09 Sep 2019 13:16:13 +0000</pubDate>
      
      <guid>https://bravchen.github.io/history/2019-09-09-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</guid>
      <description>Cookie #   服务器通过 Set-Cookie 头给客户端一串字符串 客户端每次访问相同域名的网页时，必须带上这段字符串 客户端要在一段时间内保存这个Cookie Cookie 默认在用户关闭页面后就会失效 (后台代码可以任意设置 Cookie 的过期时间) Cookie 存储的大小一般在 4kb 以内 Cookie存在的问题：用户可以随意篡改 Cookie 的内容  请求优化
response.setHeader(&amp;#39;Cache-Control&amp;#39;, &amp;#39;max-age=30&amp;#39;) // 意思是30秒内同样的URL不在重复访问，直接从本地缓存获取  注：首页无法设置，因为浏览器不允许。
 更新缓存：
可以通过更改主页引入的URL地址来更新缓存：
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;./css/default.css?v=2&amp;#34;&amp;gt; &amp;lt;script src=&amp;#34;./js/main.js?v=2&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  更多API搜索： http set cookie
 Expire #    作用与Cache-Control 类似，但计算时间的方法不一样，Expire 是通过类似闹钟的设置，到了某个固定的时间点更新请求 (固定时间指的是本地时间)
  但是这种方法有个缺点就是用户的系统时间错乱了容易误判时间 (比如用户将时间设定在未来的时间点，那这种方法的时间就会缩短或无效)。
  两种方法同时存在时优先使用 Cache-Control
  Cache-Control 与 Expire 的区别
一个是多久过期，一个是什么时间过期
Session #   将 SessionID (随机数) 通过 Cookie 发给客户端 客户端访问服务器时，服务器读取 SessionID 服务器有一块内存 (哈希表) 保存了所有 session 通过 SessionID 我们可以得到对应用户的隐私信息，如 id、email 这块内存 (哈希表) 就是服务器上的所有 session   概况：Session 就是给每个用户一个随机数组成的ID，每个ID对应一个用户名，用户第一次登陆后下次每次登录只需要通过用户的ID查找用户名即可，即使有人篡改ID，由于ID是由随机数组成，所以很难破解。</description>
    </item>
    
    <item>
      <title>webpack 的使用</title>
      <link>https://bravchen.github.io/history/2019-08-28-webpack-use/</link>
      <pubDate>Wed, 28 Aug 2019 23:02:51 +0000</pubDate>
      
      <guid>https://bravchen.github.io/history/2019-08-28-webpack-use/</guid>
      <description>部分命令可能会有些过时，所以要多看官方文档
安装 node-sass #  搜索：node sass github
github官网：https://github.com/sass/node-sass
命令行输入：
npm install node-sass -g  -g 表示全局安装
 全局安装与局部安装的区别
  全局安装的命令会将插件安装在全局目录中 (包含在$PATH中)，不论在哪个目录下都可以调用
  局部安装只能在当前路径使用该命令
  使用 #  查看版本号
node-sass -v sass 的用法
  更改CSS文件后缀为： scss
命令行中的写法：mv style.css style.scss
  使用 sass 编译：node-sass style.scss style.css
  也可以使用 scss 语法书写代码：
div { color: red; &amp;gt; ul { font-size: 16px; &amp;gt; li { border: 1px solid #000; &amp;gt; a { font-weight: bold; } } } } 再运行 node-sass style.</description>
    </item>
    
    <item>
      <title>JS基础常识</title>
      <link>https://bravchen.github.io/history/js%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%AF%86/</link>
      <pubDate>Tue, 27 Aug 2019 23:00:41 +0000</pubDate>
      
      <guid>https://bravchen.github.io/history/js%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%AF%86/</guid>
      <description>七种数据类型 #   number string boolean symbol null undefined object  五个 false 值 #   null undefined 0 NaN &#39;&amp;rsquo; ( 空字符串 )  </description>
    </item>
    
  </channel>
</rss>